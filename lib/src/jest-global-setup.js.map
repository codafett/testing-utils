{"version":3,"file":"jest-global-setup.js","sourceRoot":"","sources":["../../src/jest-global-setup.ts"],"names":[],"mappings":"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","sourcesContent":["import { createConnection, getManager } from 'typeorm';\nimport { PostgresConnectionOptions } from 'typeorm/driver/postgres/PostgresConnectionOptions';\n\nimport DbConfigSettings from './db-config-settings';\nimport {\n  ConnectionSettings,\n  DatabaseSettings,\n  DbType,\n} from './types';\n\nasync function createDatabaseIfNotExistsPostgres(\n  dbConfigSettings: DbConfigSettings,\n) {\n  const connection = await createConnection({\n    ...dbConfigSettings.testDbDefaultConfig,\n    database: 'postgres',\n  } as PostgresConnectionOptions);\n\n  const manager = getManager();\n  const result = await manager.query(\n    `SELECT 1 FROM pg_database WHERE datname = '${dbConfigSettings.testDbDefaultConfig.database}'`,\n  );\n\n  if (result.length !== 0) {\n    await manager.query(\n      `DROP DATABASE ${dbConfigSettings.testDbDefaultConfig.database}`,\n    );\n  }\n  await manager.query(\n    `CREATE DATABASE ${dbConfigSettings.testDbDefaultConfig.database}`,\n  );\n\n  await connection.close();\n}\n\nasync function createDatabaseIfNotExistsMysql(\n  dbConfigSettings: DbConfigSettings,\n) {\n  const connection = await createConnection(\n    dbConfigSettings.testDbDefaultConfig,\n  );\n\n  const manager = getManager();\n  const result = await manager.query(\n    `SELECT SCHEMA_NAME\n    FROM INFORMATION_SCHEMA.SCHEMATA\n   WHERE SCHEMA_NAME = '${dbConfigSettings.testDbDefaultConfig.database}'`,\n  );\n\n  if (result.length !== 0) {\n    await manager.query(\n      `DROP DATABASE IF EXISTS \\`${dbConfigSettings.testDbDefaultConfig.database}\\``,\n    );\n  }\n  await manager.query(\n    `CREATE DATABASE \\`${dbConfigSettings.testDbDefaultConfig.database}\\``,\n  );\n\n  await connection.close();\n}\n\nasync function connectToDbAndRunMigrations(config) {\n  const t0 = Date.now();\n  const connection = await createConnection(config);\n  const migrationsType = config.migrationsTableName;\n  const connectTime = Date.now();\n  await connection.runMigrations();\n  const migrationTime = Date.now();\n  // eslint-disable-next-line no-console\n  console.info(\n    ` 👩‍🔬 Connected in ${\n      connectTime - t0\n    }ms - Executed ${migrationsType} migrations in ${\n      migrationTime - connectTime\n    }ms.`,\n  );\n  await connection.close();\n}\n/*\n * This file is executed by Jest before running any tests.\n * We drop the database and re-create it from migrations every time.\n */\nexport const jestGlobalSetUp = (\n  databaseSettings: DatabaseSettings,\n  connectionSettings?: ConnectionSettings,\n) => async () => {\n  const dbConfigSettings = new DbConfigSettings(\n    databaseSettings,\n    connectionSettings,\n  );\n  // Make sure the DB exists\n  if (databaseSettings.dbType === DbType.MySql) {\n    await createDatabaseIfNotExistsMysql(dbConfigSettings);\n  } else if (databaseSettings.dbType === DbType.Postgres) {\n    await createDatabaseIfNotExistsPostgres(dbConfigSettings);\n  } else {\n    throw new Error(`DbType not known`);\n  }\n\n  // Connect and run seeds\n  await connectToDbAndRunMigrations(\n    dbConfigSettings.testDbInitConfig,\n  );\n\n  const { testDbSeedConfig, testDbTaskConfig } = dbConfigSettings;\n  // Connect and run test tasks if required\n  if (testDbTaskConfig) {\n    await connectToDbAndRunMigrations(testDbTaskConfig);\n  }\n\n  // Connect and run test seeds if required\n  if (testDbSeedConfig) {\n    await connectToDbAndRunMigrations(testDbSeedConfig);\n  }\n};\n"]}