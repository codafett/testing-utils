{"version":3,"file":"db-config-settings.js","sourceRoot":"","sources":["../../src/db-config-settings.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { ConnectionOptions, EntitySchema } from 'typeorm';\n\nimport {\n  ConnectionSettings,\n  DatabaseSettings,\n  DbType,\n} from './types';\n\nexport const ConnectionSettingsByType: Record<\n  DbType,\n  ConnectionSettings\n> = {\n  [DbType.MySql]: {\n    typeName: 'mysql',\n    host: '127.0.0.1',\n    localTestPort: 3333,\n    ciTestPort: 3306,\n    userName: 'mysql',\n    password: 'tiney',\n  },\n  [DbType.Postgres]: {\n    typeName: 'postgres',\n    host: '127.0.0.1',\n    localTestPort: 5555,\n    ciTestPort: 5432,\n    userName: 'postgres',\n    password: 'tiney',\n  },\n};\n\nexport default class DbConfigSettings {\n  private _dbType: DbType;\n\n  public get dbType(): DbType {\n    return this._dbType;\n  }\n\n  private _testDbDefaultConfig: ConnectionOptions;\n\n  public get testDbDefaultConfig(): ConnectionOptions {\n    return this._testDbDefaultConfig;\n  }\n\n  private _testDbInitConfig: ConnectionOptions;\n\n  public get testDbInitConfig() {\n    return this._testDbInitConfig;\n  }\n\n  private _testDbSeedConfig: ConnectionOptions | undefined;\n\n  public get testDbSeedConfig() {\n    return this._testDbSeedConfig;\n  }\n\n  private _testDbTaskConfig: ConnectionOptions;\n\n  public get testDbTaskConfig() {\n    return this._testDbTaskConfig;\n  }\n\n  constructor(\n    databaseSettings: DatabaseSettings,\n    connectionSettingOverrides?: Partial<ConnectionSettings>,\n  ) {\n    this._dbType = databaseSettings.dbType;\n\n    const dsTypeConnectionSettings =\n      ConnectionSettingsByType[databaseSettings.dbType];\n    if (!dsTypeConnectionSettings) {\n      throw new Error(\n        `Could not locate a config for type: ${databaseSettings.dbType}`,\n      );\n    }\n\n    const settings = {\n      ...dsTypeConnectionSettings,\n      ...connectionSettingOverrides,\n    };\n\n    const dbPort: number =\n      process.env.CI === 'true' && process.env.CIRCLECI === 'true'\n        ? settings.ciTestPort\n        : settings.localTestPort;\n\n    this._testDbDefaultConfig = {\n      type: settings.typeName,\n      port: dbPort,\n      logging: process.env.TEST_DB_LOGGING || false,\n      host: settings.host,\n      username: settings.userName,\n      password: settings.password,\n      database: databaseSettings.databaseName,\n      entities: databaseSettings.entities as\n        | (string | Function | EntitySchema<unknown>)[]\n        | undefined,\n      subscribers: databaseSettings?.subscribers,\n    } as ConnectionOptions;\n\n    this._testDbInitConfig = {\n      ...this.testDbDefaultConfig,\n      synchronize: true,\n      dropSchema: true,\n      migrationsTableName: 'seeds',\n      migrations: databaseSettings?.seeds,\n      cli: {\n        migrationsDir: databaseSettings?.migrationsDir,\n      },\n    } as ConnectionOptions;\n\n    this._testDbTaskConfig = {\n      ...this.testDbDefaultConfig,\n      migrationsTableName: 'tasks',\n      migrations: databaseSettings?.tasks,\n      cli: {\n        migrationsDir: databaseSettings?.migrationsDir,\n      },\n    } as ConnectionOptions;\n\n    if (\n      !!databaseSettings?.testSeeds !==\n      !!databaseSettings?.testMigrationsDir\n    ) {\n      throw new Error(\n        'You must provide both testSeeds AND testMigrationsDir to run test seed migration scripts',\n      );\n    }\n    this._testDbSeedConfig =\n      databaseSettings?.testSeeds &&\n      databaseSettings?.testMigrationsDir\n        ? ({\n            ...this.testDbDefaultConfig,\n            migrationsTableName: 'seeds',\n            migrations: databaseSettings.testSeeds,\n            cli: {\n              migrationsDir: databaseSettings.testMigrationsDir,\n            },\n          } as ConnectionOptions)\n        : undefined;\n  }\n}\n"]}