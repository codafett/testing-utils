{"version":3,"file":"db-utils.js","sourceRoot":"","sources":["../../../src/utils/db-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DeepPartial,\n  EntityTarget,\n  FindManyOptions,\n  FindOneOptions,\n  getConnection,\n  SaveOptions,\n} from 'typeorm';\n\nexport interface FindEntityOptions<ET> {\n  findOneOptions?: FindOneOptions<ET>;\n  findManyOptions?: FindManyOptions<ET>;\n}\n\nexport interface SaveEntityOptions<ET> extends FindEntityOptions<ET> {\n  saveOptions?: SaveOptions;\n}\n\nexport function getRepository<ET>(entityTarget: EntityTarget<ET>) {\n  return getConnection().getRepository(entityTarget);\n}\n\nexport function createEntity<ET>(\n  entityTarget: EntityTarget<ET>,\n  entity?: DeepPartial<ET>,\n): ET {\n  const repo = getRepository(entityTarget);\n  return entity ? repo.create(entity) : repo.create();\n}\n\nfunction getEntityId(entity: unknown) {\n  let entityId;\n  if (Object.prototype.hasOwnProperty.call(entity, 'id')) {\n    entityId = (entity as { id: string | number | Date }).id;\n  }\n  return entityId;\n}\n\nfunction getEntitySlug(entity: unknown) {\n  let entityId;\n  if (Object.prototype.hasOwnProperty.call(entity, 'slug')) {\n    entityId = (entity as { slug: string }).slug;\n  }\n  return entityId;\n}\n\nexport async function getEntity<ET>(\n  entityTarget: EntityTarget<ET>,\n  id: string | number | Date,\n  options?: FindOneOptions<ET>,\n): Promise<ET | undefined> {\n  const repo = getRepository(entityTarget);\n  return repo.findOne(id, options);\n}\n\nexport async function saveEntity<ET>(\n  entityTarget: EntityTarget<ET>,\n  entity?: ET,\n  getId?: (e: ET) => string | number | Date,\n  options?: SaveEntityOptions<ET>,\n): Promise<ET> {\n  const repo = getRepository(entityTarget);\n  let dbEntity: ET;\n  dbEntity = await repo.save(\n    entity as DeepPartial<ET>,\n    options?.saveOptions,\n  );\n  const dbEntityId = getId?.(dbEntity) || getEntityId(dbEntity);\n  if (dbEntityId) {\n    dbEntity =\n      (await getEntity(\n        entityTarget,\n        dbEntityId,\n        options?.findOneOptions,\n      )) || dbEntity;\n  } else {\n    const entitySlug = getEntitySlug(dbEntity);\n    if (entitySlug) {\n      [dbEntity] = (await repo.find({\n        ...options?.findManyOptions,\n        where: { slug: entitySlug },\n      })) || [dbEntity];\n    }\n  }\n\n  return dbEntity;\n}\n\nexport async function createAndSaveEntity<ET>(\n  entityTarget: EntityTarget<ET>,\n  entity: DeepPartial<ET>,\n  getId?: (e: ET) => string | number | Date,\n  options?: SaveEntityOptions<ET>,\n): Promise<ET> {\n  const dbEntity = createEntity(entityTarget, entity);\n  return saveEntity(entityTarget, dbEntity, getId, options);\n}\n\nexport async function findEntity<ET>(\n  entityTarget: EntityTarget<ET>,\n  option?: FindManyOptions<ET>,\n): Promise<ET[]> {\n  const repo = getRepository(entityTarget);\n  return option ? repo.find(option) : repo.find();\n}\n\nexport function convertDbEntityToResponseEntity(entity: unknown) {\n  return JSON.parse(JSON.stringify(entity));\n}\n\nexport function expectEntitiesToMatch(responseEntity, dbEntity) {\n  expect(responseEntity).toMatchObject(\n    convertDbEntityToResponseEntity(dbEntity),\n  );\n}\n\nexport function convertDbEntitiesToResponseEntities(\n  entities: unknown[],\n) {\n  return entities.map(convertDbEntityToResponseEntity);\n}\n\nexport function expectEntityArraysToMatch(\n  responseEntities,\n  dbEntities,\n) {\n  expect(responseEntities).toMatchObject(\n    dbEntities.map(convertDbEntityToResponseEntity),\n  );\n}\n"]}