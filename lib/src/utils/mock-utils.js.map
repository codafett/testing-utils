{"version":3,"file":"mock-utils.js","sourceRoot":"","sources":["../../../src/utils/mock-utils.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAgG;AAWhG,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,+BAAW,CAAA;IACX,iCAAa,CAAA;IACb,+BAAW,CAAA;IACX,mCAAe,CAAA;IACf,qCAAiB,CAAA;AACnB,CAAC,EANW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAM3B;AAED,MAAM,SAAS,GAAwD,CAAC;IACtE,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG;CACpD,CAAC,CAAC;AAEH,SAAgB,eAAe,CAC7B,QAAgB,EAChB,mBAAyC,EACzC,qBAA8B;IAE9B,MAAM,KAAK,GAAG,IAAA,cAAI,EAAC,QAAQ,EAAE,EAAE,aAAa,EAAE,qBAAqB,EAAC,CAAC,CAAC;IACtE,mBAAmB,CAAC,OAAO,CACzB,CAAC,kBAAkB,CAAC,EAAE;QACpB,MAAM,eAAe,GACnB,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CACjC,KAAK,CAAC,CACN,kBAAkB,CAAC,GAAG,EAAE,kBAAkB,CAAC,WAAW,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAA;QACjG,eAAe,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,IAAI,GAAG,EAAE,EAAE,IAAI,EAAE,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC;IACrG,CAAC,CAAC,CACH,CAAA;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAhBD,0CAgBC","sourcesContent":["import nock, { InterceptFunction, Interceptor, Options, RequestBodyMatcher, Scope } from 'nock';\n\nexport interface HttpCallDefinition {\n  url: string;\n  type: MockHttpCallType,\n  requestBody?: RequestBodyMatcher,\n  responseData?: unknown;\n  interceptorOptions?: Options\n  status?: number;\n}\n\nexport enum MockHttpCallType {\n  GET = 'get',\n  POST = 'post',\n  PUT = 'put',\n  PATCH = 'patch',\n  DELETE = 'delete'\n}\n\nconst httpCalls: Record<string, (scope: Scope) => InterceptFunction> = ({\n  [MockHttpCallType.GET]: (scope: Scope) => scope.get\n});\n\nexport function mockHttpGetCall(\n  basePath: string,\n  httpCallDefinitions: HttpCallDefinition[],\n  allowUnmockedRequests: boolean\n) {\n  const scope = nock(basePath, { allowUnmocked: allowUnmockedRequests});\n  httpCallDefinitions.forEach(\n    (httpCallDefinition => {\n      const httpInterceptor: Interceptor = \n        httpCalls[httpCallDefinition.type]\n        (scope)\n        (httpCallDefinition.url, httpCallDefinition.requestBody, httpCallDefinition.interceptorOptions)\n      httpInterceptor.reply(httpCallDefinition.status || 200, { data: httpCallDefinition.responseData });\n    })\n  )\n  return scope;\n}\n"]}