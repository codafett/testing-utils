{"version":3,"file":"mock-utils.js","sourceRoot":"","sources":["../../../src/utils/mock-utils.ts"],"names":[],"mappings":";;;AAAA,0DAK+B;AAE/B,SAAgB,mBAAmB;IAIjC,OAAO,IAAI;SACR,KAAK,CAAC,iCAAgB,EAAE,qBAAqB,CAAC;SAC9C,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACvD,CAAC;AAPD,kDAOC;AAED,SAAgB,gBAAgB;IAC9B,OAAO,IAAI;SACR,KAAK,CAAC,8BAAa,EAAE,cAAc,CAAC;SACpC,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACvD,CAAC;AAJD,4CAIC;AAED,SAAgB,cAAc;IAC5B,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC9B,qBAAI,CAAC,GAAG,GAAG,WAAW,CAAC;IACvB,OAAO,WAAW,CAAC;AACrB,CAAC;AAJD,wCAIC;AAED,SAAgB,eAAe,CAC7B,mBAIG;IAEH,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACrC,WAAW,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CACvB,CAAC;QACF,IAAI,kBAAkB,EAAE;YACtB,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,EAAE,IAAI,EAAE,kBAAkB,CAAC,IAAI,EAAE;gBACvC,MAAM,EAAE,kBAAkB,CAAC,MAAM,IAAI,GAAG;aACzC,CAAC,CAAC;SACJ;QACD,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,sBAAsB,CAAC,CAAC;QACjD,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,QAAQ,GAAG,sBAAsB,CAAC,CAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACrB,CAAC;AAxBD,0CAwBC","sourcesContent":["import {\n  AgentNote,\n  agentNoteService,\n  http,\n  pubsubService,\n} from '@tiney/infrastructure';\n\nexport function mockCreateAgentNote(): jest.SpyInstance<\n  Promise<string>,\n  [AgentNote]\n> {\n  return jest\n    .spyOn(agentNoteService, 'createAutoAgentNote')\n    .mockImplementation(() => Promise.resolve('done'));\n}\n\nexport function mockPublishTopic() {\n  return jest\n    .spyOn(pubsubService, 'publishTopic')\n    .mockImplementation(() => Promise.resolve('done'));\n}\n\nexport function getHttpGetMock() {\n  const httpMockGet = jest.fn();\n  http.get = httpMockGet;\n  return httpMockGet;\n}\n\nexport function mockHttpGetCall(\n  responseDefinitions: {\n    status?: number;\n    url: string;\n    data: unknown;\n  }[],\n) {\n  const httpGetMock = getHttpGetMock();\n  httpGetMock.mockImplementation((url) => {\n    const responseDefinition = responseDefinitions.find(\n      (rd) => rd.url === url,\n    );\n    if (responseDefinition) {\n      return Promise.resolve({\n        data: { data: responseDefinition.data },\n        status: responseDefinition.status || 200,\n      });\n    }\n    console.error(`Url: ${url} has not been mocked`);\n    return Promise.reject(\n      new Error(`Url: ${url} has not been mocked`),\n    );\n  });\n  return httpGetMock;\n}\n"]}